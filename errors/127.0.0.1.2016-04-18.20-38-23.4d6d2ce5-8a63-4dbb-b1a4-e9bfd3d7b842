(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> CONTAINS() takes at least 3 arguments (3 given)"
p3
sS'layer'
p4
S'/home/saiteja/Desktop/web2py/applications/resume/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Hello World")\n    return dict(message=T(\'Welcome to web2py!\'))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n@auth.requires_login()\ndef myresume():\n    f=db(db.namess.uploadedby==auth.user.id).select(db.namess.ALL);\n    return dict(message=T(\'Your Resumes\'),f=f)\n\n@auth.requires_login()\ndef uploadresume():\n    return locals()\n\n@auth.requires_login()\ndef my_action():\n    db.namess.insert(name=request.vars.name,email=request.vars.email,summary=request.vars.summ,works=request.vars.works,education=request.vars.edu,addinfo=request.vars.addinfo,skills=request.vars.works2,phone=request.vars.phone,gpa=request.vars.edu2,uploadedby=auth.user.id);\n    return "Sucess"\n\ndef findresume():\n    return locals()\n\ndef editresume():\n   record = db.namess(request.args(0)) or redirect(URL(\'index\'))\n   form = SQLFORM(db.namess, record)\n   if form.process().accepted:\n       response.flash = \'form accepted\'\n   elif form.errors:\n       response.flash = \'form has errors\'\n   return dict(req=request.args(0),form=form)\n\ndef deleteresume():\n    res = (db.namess.id==request.args(0))\n    db(res).delete()\n    redirect(URL(\'myresume\'));\n\n#@auth.requires_login()\ndef allresume():\n    f=db(db.namess.id>0).select(db.namess.ALL);\n    return dict(message=T(\'All Resumes\'),f=f)\n\n#@auth.requires_login()\ndef moreresume():\n    f=db(db.namess.id==request.args(0)).select(db.namess.ALL);\n    commenta=db(db.comments.resumeid==request.args(0)).select()\n    db.comments.userid.default=auth.user.id\n    db.comments.resumeid.default=request.args(0)\n    db.comments.userid.readable=False\n    db.comments.userid.writable=False\n    db.comments.resumeid.readable=False\n    db.comments.resumeid.writable=False\n    form = SQLFORM(db.comments)\n    if form.process().accepted:\n        response.flash="response recorded"\n        redirect(URL(\'moreresume\',args=request.args(0)))\n    return dict(message=T(\'More Info\'),f=f,commenta=commenta,form=form)\n\n@auth.requires_login()\ndef markresume():\n    check=db((db.mark.resumeid==request.args(0)) & (db.mark.userid==auth.user.id)).count()\n    if check == 0:\n         ret = db.mark.insert(resumeid = request.args(0) , userid=auth.user.id)\n         response.flash="Marked The Resume!"\n    else:\n        already_liked = (db.mark.userid==auth.user.id)&(db.mark.resumeid==request.args(0))\n        db(already_liked).delete()\n        response.flash="UNmarked The Resume!"\n    return "Sucess"\n\n@auth.requires_login()\ndef markedresume():\n    f=db( (db.mark.userid==auth.user.id) & (db.namess.id==db.mark.resumeid) ).select(db.namess.ALL)\n    return locals()\n\n@auth.requires_login()\ndef unmark():\n    already_liked = (db.mark.userid==auth.user.id)&(db.mark.resumeid==request.args(0))\n    db(already_liked).delete()\n    redirect(URL(\'markedresume\'));\n\n@auth.requires_login()\ndef deletecomment():\n    already_liked = (db.comments.id==request.args(0))\n    db(already_liked).delete()\n    redirect(URL(\'moreresume\',args=request.args(1)))\n    \n@auth.requires_login()\ndef findresume():\n        return locals()\n\ndef templates():\n        return locals()\n\n@auth.requires_login()\ndef callback():\n     "an ajax callback that returns a <ul> of links to wiki pages"\n     query = db.namess.name.contains(request.vars.keyword)\n     query1 = db.namess.email.contains(request.vars.keyword1)\n     query2 = db.namess.skills.contains(request.vars.keyword1)\n     if request.vars.task == "as":\n         pages = db(query & query1 & query2 ).select(orderby=db.namess.name)\n     else:\n        pages = db(query & query1 & query2 ).select(orderby=~db.namess.name)\n     links=[]\n     for p in pages:\n         links += [ [ DIV( A(p.name, _href=URL(\'moreresume\',args=p.id)),XML(\'&nbsp &nbsp\'),DIV(p.email),DIV(p.gpa)) ] ]\n     return UL(*links)\n\n@auth.requires_login()\ndef seeprofile():\n    dat=db(db.auth_user.id==auth.user.id).select()\n    response.flash = T("My Profile")\n    return dict(message=T(\'Viewing my Profile!\'),dat=dat)\n\n@auth.requires_login() \ndef info():\n    dat=db( db.auth_user.id ==  request.args(0)  ).select()\n    response.flash = T("Requested Profile")\n    return dict(message=T(\'Viewing requested Profile!\'),dat=dat)\n\nresponse._vars=response._caller(callback)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/saiteja/Desktop/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/saiteja/Desktop/web2py/applications/resume/controllers/default.py", line 175, in <module>\n  File "/home/saiteja/Desktop/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/saiteja/Desktop/web2py/gluon/tools.py", line 4236, in f\n    return action(*a, **b)\n  File "/home/saiteja/Desktop/web2py/applications/resume/controllers/default.py", line 155, in callback\n    pages = db(query & query1 & query2 ).select(orderby=db.namess.name)\n  File "/home/saiteja/Desktop/web2py/gluon/packages/dal/pydal/objects.py", line 2025, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/home/saiteja/Desktop/web2py/gluon/packages/dal/pydal/adapters/sqlite.py", line 124, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/home/saiteja/Desktop/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1280, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/saiteja/Desktop/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1167, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/home/saiteja/Desktop/web2py/gluon/packages/dal/pydal/adapters/base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "/home/saiteja/Desktop/web2py/gluon/packages/dal/pydal/adapters/base.py", line 767, in AND\n    return \'(%s AND %s)\' % (self.expand(first), self.expand(second))\n  File "/home/saiteja/Desktop/web2py/gluon/packages/dal/pydal/adapters/base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "/home/saiteja/Desktop/web2py/gluon/packages/dal/pydal/adapters/base.py", line 767, in AND\n    return \'(%s AND %s)\' % (self.expand(first), self.expand(second))\n  File "/home/saiteja/Desktop/web2py/gluon/packages/dal/pydal/adapters/base.py", line 954, in expand\n    rv = op(first, **optional_args)\nTypeError: CONTAINS() takes at least 3 arguments (3 given)\n'
p11
s.